//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Resources/Input/MainController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputSystem
{
    public partial class @MainController : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MainController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainController"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""4cffd4d3-77ae-4415-b8d2-aa0170ec14a9"",
            ""actions"": [
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""6c8c25aa-aca7-4df5-a60c-ffb098c82e0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""7fce52e8-334c-4cbb-9a49-3c035714759c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2),Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""Button"",
                    ""id"": ""6427b394-21b5-4e52-ba56-eb60a2bd8de7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""4a548457-04b6-459d-8f4a-3e2f54664f24"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eab16bc7-e53e-446f-97f6-d0f956a19463"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e3c217a-0ff3-4ae8-8936-315cde6378ce"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e1c6be3-c52d-4375-b76e-c5930f624e9e"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46ddb6ad-a1c5-491c-9de7-6a566bc60065"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MainMap
            m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
            m_MainMap_RightClick = m_MainMap.FindAction("RightClick", throwIfNotFound: true);
            m_MainMap_LeftClick = m_MainMap.FindAction("LeftClick", throwIfNotFound: true);
            m_MainMap_MiddleClick = m_MainMap.FindAction("MiddleClick", throwIfNotFound: true);
            m_MainMap_MousePosition = m_MainMap.FindAction("MousePosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MainMap
        private readonly InputActionMap m_MainMap;
        private IMainMapActions m_MainMapActionsCallbackInterface;
        private readonly InputAction m_MainMap_RightClick;
        private readonly InputAction m_MainMap_LeftClick;
        private readonly InputAction m_MainMap_MiddleClick;
        private readonly InputAction m_MainMap_MousePosition;
        public struct MainMapActions
        {
            private @MainController m_Wrapper;
            public MainMapActions(@MainController wrapper) { m_Wrapper = wrapper; }
            public InputAction @RightClick => m_Wrapper.m_MainMap_RightClick;
            public InputAction @LeftClick => m_Wrapper.m_MainMap_LeftClick;
            public InputAction @MiddleClick => m_Wrapper.m_MainMap_MiddleClick;
            public InputAction @MousePosition => m_Wrapper.m_MainMap_MousePosition;
            public InputActionMap Get() { return m_Wrapper.m_MainMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
            public void SetCallbacks(IMainMapActions instance)
            {
                if (m_Wrapper.m_MainMapActionsCallbackInterface != null)
                {
                    @RightClick.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnRightClick;
                    @RightClick.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnRightClick;
                    @RightClick.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnRightClick;
                    @LeftClick.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnLeftClick;
                    @LeftClick.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnLeftClick;
                    @LeftClick.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnLeftClick;
                    @MiddleClick.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMiddleClick;
                    @MiddleClick.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMiddleClick;
                    @MiddleClick.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMiddleClick;
                    @MousePosition.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMousePosition;
                    @MousePosition.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMousePosition;
                    @MousePosition.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnMousePosition;
                }
                m_Wrapper.m_MainMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @RightClick.started += instance.OnRightClick;
                    @RightClick.performed += instance.OnRightClick;
                    @RightClick.canceled += instance.OnRightClick;
                    @LeftClick.started += instance.OnLeftClick;
                    @LeftClick.performed += instance.OnLeftClick;
                    @LeftClick.canceled += instance.OnLeftClick;
                    @MiddleClick.started += instance.OnMiddleClick;
                    @MiddleClick.performed += instance.OnMiddleClick;
                    @MiddleClick.canceled += instance.OnMiddleClick;
                    @MousePosition.started += instance.OnMousePosition;
                    @MousePosition.performed += instance.OnMousePosition;
                    @MousePosition.canceled += instance.OnMousePosition;
                }
            }
        }
        public MainMapActions @MainMap => new MainMapActions(this);
        public interface IMainMapActions
        {
            void OnRightClick(InputAction.CallbackContext context);
            void OnLeftClick(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
        }
    }
}
